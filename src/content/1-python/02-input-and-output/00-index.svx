---
title: Advanced Printing
---

## Concatenation With Other Datatypes

In Python, we can use a technique called string formatting to help us format the output of our code better.
For example, take the following scenario:

```python
dollars = 5
print("I have " + dollars + " dollars.")  # [!code error] 
# [!code error] TypeError: can only concatenate str (not "int") to str
```

If we try to run this code, we get a TypeError, and Python tells us we can only concatenate a string (str)
with another string. In the example above, we tried to concatenate an integer (int) to a string, as 
the type of dollars is an integer, but this is not possible. To fix this, we can simply **cast**[^1] the integer
to a string as shown below:

<EditableCode fixedHeight={2} fixedOutputHeight={1}>

```python
dollars = 5
print("I have " + str(dollars) + " dollars.")
```

</EditableCode>

However, there is a more elegant way to do this, without having to explicitly cast the type of `dollars`.

## F-Strings

F-Strings are the recommended way to format strings in Python >= 3.6. Using an f-string is simple: just
prepend the string literal with the character `f`, and by using curly brackets `{}` inside the string,
Python will automatically type cast the variable that you pass inside the braces to a string.
Let's see the same example above, but with an f-string:

<EditableCode fixedHeight={2} fixedOutputHeight={1}>

```python
dollars = 5
print(f"I have {dollars} dollars.")
```

</EditableCode>

### Advanced Techniques

Using f-strings enables us to format strings in many more ways. For example, by adding an equal sign
after the variable inserted in an f-string, we can quickly get a representation of the variable we printed.

<EditableCode>

```python
my_variable = 5
print(f'{my_variable=}')

my_other_variable = 10
print(f'{my_other_variable = }')
```

</EditableCode>

We can make use of many more formatting techniques other than just the equal sign, however.
For a full list, click here [link](https://docs.python.org/3/library/string.html#format-string-syntax).

Here are a few more examples of ways you could use these formatting techniques:

<EditableCode>

```python
my_number = 3.141592

print(f'{my_number:.2f}')  # rounds to 2 decimal places
print(f'{my_number:.3f}')  # rounds to 3 decimal places
print()

my_big_number = 1234567890

print(f'{my_big_number:,}')  # use commas as thousands seperator in large numbers
print(f'{my_big_number:_}')  # use underscores
print()

my_text = 'text'

print(f'{my_text:<20}')  # left align within 20 spaces
print(f'{my_text:>20}')  # right align within 20 spaces
print(f'{my_text:^20}')  # center align within 20 spaces 
print()
print(f'{my_text:~<20}')  # do the same, but using a ~
print(f'{my_text:~>20}')
print(f'{my_text:~^20}')
print()

my_other_number = -2.718281

print(f'{my_number:+f} {my_other_number:+f}')  # always show sign
print(f'{my_number: f} {my_other_number: f}')  # show space for positive
print(f'{my_number:-f} {my_other_number:-f}')  # only show minus, same as using `:f`
print()

# now, all together
large_number = 101202303.4321
print(f'{large_number:~^+25,.2f}')
```

</EditableCode>


[^1]: Casting means changing the datatype of a variable into another.